# -*- coding: utf-8 -*-
"""stock forcasting by implementing LSTM and RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xnO6iotn7-Cywe8Mk27fXAqoHcV2q1tf
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from matplotlib.pylab import rcParams
rcParams['figure.figsize']=20,10
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Dense

from sklearn.preprocessing import MinMaxScaler

from google.colab import files
uploaded=files.upload()

import io
df=pd.read_csv(io.BytesIO(uploaded['NSE-TATAGLOBAL.csv']))
df.head()

"""# **Analyze the closing prices from dataframe**"""

df["Date"]=pd.to_datetime(df.Date,format="%d-%m-%Y")
df.index=df['Date']
plt.figure(figsize=(16,8))
plt.plot(df["Close"],label='close price history')

"""# **Sort the dataset on date time and filter “Date” and “Close” columns**"""

data=df.sort_index(ascending=True)

new_Dataset=pd.DataFrame(index=range(0,len(df)),columns=['Date','Close'])
for i in range(0,len(data)):
  new_Dataset["Date"][i]=data['Date'][i]
  new_Dataset["Close"][i]=data['Close'][i]
new_Dataset

"""# **Normalize the new filtered dataset**"""

df.describe()

scaler=MinMaxScaler(feature_range=(0,1))

final_Dataset=new_Dataset.values
train_Data=final_Dataset[0:980,:]
valid_Data=final_Dataset[980:,:]

new_Dataset.index=new_Dataset.Date
new_Dataset.drop("Date",axis=1,inplace=True)
final_Dataset=new_Dataset.values
scaler=MinMaxScaler(feature_range=(0,1))
scaled_Data=scaler.fit_transform(final_Dataset)

x_Train_Data,y_Train_Data=[],[]

for i in range(60,len(train_Data)):
  x_Train_Data.append(scaled_Data[i-60:i,0])
  y_Train_Data.append(scaled_Data[i,0])

x_Train_Data,y_Train_Data=np.array(x_Train_Data),np.array(y_Train_Data)
x_Train_Data=np.reshape(x_Train_Data,(x_Train_Data.shape[0],x_Train_Data.shape[1],1))

"""# **Build and train the LSTM model**"""

lstm_model=Sequential()
lstm_model.add(LSTM(units=50,return_sequences=True,input_shape=(x_Train_Data.shape[1],1)))
lstm_model.add(LSTM(units=50))
lstm_model.add(Dense(1))

inputs_data=new_Dataset[len(new_Dataset)-len(valid_Data)-60:].values
inputs_data=inputs_data.reshape(-1,1)
inputs_data=scaler.transform(inputs_data)

lstm_model.compile(loss='mean_squared_error',optimizer='adam')
lstm_model.fit(x_Train_Data,y_Train_Data,epochs=1,batch_size=1,verbose=2)

"""# Take a sample of a dataset to make stock price predictions using the LSTM model"""

x_test=[]
for i in range(60,inputs_data.shape[0]):
  x_test.append(inputs_data[i-60:i,0])

x_test=np.array(x_test)

x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
predicted_Closing_price=lstm_model.predict(x_test)
predicted_Closing_price=scaler.inverse_transform(predicted_Closing_price)

"""## **Save the LSTM model**"""

lstm_model.save("saved_model.RS")

"""## **Visualize the predicted stock costs with actual stock costs**"""

train_Data=new_Dataset[:980]
valid_Data=new_Dataset[980:]
valid_Data['predictions']=predicted_Closing_price
plt.plot(train_Data["Close"])
plt.plot(valid_Data[['Close',"predictions"]])

lstm_model.predict(x_test)



